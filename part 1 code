package understandconcept;

import java.util.LinkedList;
import java.util.Queue;
 
public class SnakesLadder
{
    // An entry in queue used in BFS
    static class qentry
    {
        int v;// Vertex number
        int dist;// Distance of this vertex from source
    }
 
    static int getMinDiceThrows(int move[], int n)
    {
        int visited[] = new int[n];
        Queue<qentry> q = new LinkedList<>();
        qentry qe = new qentry();
        qe.v = 0;
        qe.dist = 0;
 
        visited[0] = 1;
        q.add(qe);
        while (!q.isEmpty())
        {
            qe = q.remove();
            int v = qe.v;
 
            if (v == n - 1)
                break;

            for (int j = v + 1; j <= (v + 6) && j < n; ++j)
            {

                if (visited[j] == 0)
                {
                    qentry a = new qentry();
                    a.dist = (qe.dist + 1);
                    visited[j] = 1;
 
                    if (move[j] != -1)
                        a.v = move[j];
                    else
                        a.v = j;
                    q.add(a);
                }
            }
        }

        return qe.dist;
    }
   
 
    public static void main(String[] args)
    {
 
    	int player_1 = 88;
    	int player_2 = 87;
    	
        int N = 100-player_1+1;
        int moves[] = new int[N];
        for (int i = 0; i < N; i++) {
            moves[i] = -1;
        }
        int p1result = getMinDiceThrows(moves, N);
        
 
        System.out.print("Min Dice throws required for player 1 is "+p1result +" and dice are : ");
        for(int i = 0; i<p1result; i++) {
        	if(N>6) {
    			System.out.print(6+", ");
    		}else {
    			System.out.println(N);
    		}
        	N = N - 6;
        	
        }
        N = 100-player_2 +1;
        int moves1[] = new int[N];
        for (int i = 0; i < N; i++) {
            moves1[i] = -1;
        }
        
        int p2result = getMinDiceThrows(moves1, N);
        System.out.println();
        
        System.out.println("Min Dice throws required for player 2 is "+p2result +" and dice are : ");
        for(int i = 0; i<p2result; i++) {
        	if(N>6) {
    			System.out.print(6+", ");
    		}else {
    			System.out.println(N);
    		}
        	N = N - 6;
        	
        }
    }
}
