package understandconcept;



import java.util.LinkedList;
import java.util.Queue;

public class part2
{

 static class qentry
 {
     int v;// Vertex number
     int dist;// Distance of this vertex from source
 }

 static int getMinDiceThrows(int move[], int n)
 {
     int visited[] = new int[n];
     Queue<qentry> q = new LinkedList<>();
     qentry qe = new qentry();
     qe.v = 0;
     qe.dist = 0;

     for(int i =0; i<88; i++) {
    	 visited[i] = 1;
     }
     q.add(qe);

 
     while (!q.isEmpty())
     {
         qe = q.remove();
         int v = qe.v;

         if (v == n - 1)
             break;

         for (int j = v + 1; j <= (v + 6) && j < n; ++j)
         {
        	 
             if (visited[j] == 0)
             {
     
                 qentry a = new qentry();
                 a.dist = (qe.dist + 1);
                 visited[j] = 1;

                 if (move[j] != -1)
                     a.v = move[j];
                 else
                     a.v = j;
                 q.add(a);
             }
         }
     }
     return qe.dist;
 }

 public static void main(String[] args)
 {
     int N = 100;
     int moves[] = new int[N];
     for (int i = 0; i < N; i++)
         moves[i] = -1;

  

     // Snakes
     moves[98] = 36;

     System.out.println("Min Dice throws required is " +
                       getMinDiceThrows(moves, N));
 }
}
